Given a non-empty array of integers, return the k most frequent elements.
Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 = k = number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

The others were general questions about my previous experience

-------------------------------------------------------------------------------------------------------------------
eBay - first round
Given a list of int, returns the all unique ints with no. of occurances in the list

a = {1,2,3,2,4,1,1} 
O/p:
1 - 3
2 - 2
3 - 1
4 - 1

int[] a = new int[]{1,2,3,2,4,1,1};
null

Map m = Arrays.stream(a)
                      .sorted()
                      .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

public class MyTest{

  public HashMap returnGroup(int[] a){
  
    if( a == null)
      return null;
    
    if( a.length == 0 )
      return null;
    
    HashMap m = new HashMap<>();
    for(int i=0; i       if(m.containsKey(a[i])){
        m.put(a[i], m.get(a[i]) + 1);
      } else {
        m.put(a[i], 1);
      }
    }
    
    return m;
  }
}

//1, 1
//2, 1
//3, 1
//2, 2
//4, 1
//1, 2
//1, 3

//1, 3
//2, 2
//3, 1
//4, 1

public class Test{
  MyTest() my;
  
  
  @Before
  public void setUp(){
     my = new MyTest();
     //int[] a2 = new int[]{2, 4, 5, 5, 6, 4};
  }

  @Test
  public void test(){
    int[] a = new int[]{1,2,3,2,4,1,1};
    HashMap ret = my.returnGroup(a);
    
    HashMap expected = new HashMap<>();
    expected.put(1, 3);
    expected.put(2, 2);
    expected.put(3, 1);
    expected.put(4, 1);
    
    Assert.assertEquals(expected, ret);
  }
  
  @Test
  public void Test2_Null(){
    
      int[] a2 = null;
      HashMap ret = my.returnGroup(a2);
      Assert.assertNull(ret);
    
  }
  
  @Test
  public void Test2_Null_withArrayIsNoElements(){
    
      int[] a2 = new int[]{};
      HashMap ret = my.returnGroup(a2);
      Assert.assertNull(ret);
    
  }

}

eBay - second round,

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

print binary tree level by level
/*    1      - 0
    /  \
   2    3    - 1 
 /  \  / \
4   5  6  7  - 2

1
2,3
4,5,6,7

Node {
  int value;
  Node left, right;
  public Node (int v) {
    this.value = v;
    this.left = null;
    this.right = null;
  }

} 

*/

If you have to retrieve data from big database What should you do?
--------------------------------------------------------------------------------------------------------------
Both coding round 
Both medium to hard question 
Coding is from Binary tree and Matrix side.
Coding questions

1. Given a binary tree, print the elements in the anti-clockwise direction. (boundary elements in an anti-clockwise direction)
2. Given a matrix of ‘O’ and ‘X’, replace ‘O’ with ‘X’ if surrounded by ‘X’.
https://leetcode.com/problems/surrounded-regions/
[x x x x x]
[x o o x x]
[x x x x x]
output:
[x x x x x]
[x x x x x]
[x x x x x]
---------------------------------------------------------------------------------------------------------------------
2 rounds
Both are problem solving and Data structure questions.
1. In a string find the pattern
https://www.geeksforgeeks.org/algorithms-gq/pattern-searching/
2.Validating Parenthesis
https://leetcode.com/problems/valid-parentheses/
----------------------------------------------------------------------------------------------------------------------
2 Managers were there 1st round with one of the manager was on Coding side - 
2nd round with another manager was on Object oriented based designing coding question - 
Other questions were based on her projects and some behavioral questions. 
They also discussed about their own project and team and future plans as well.
----------------------------------------------------------------------------------------------------------------------------
these two coding question had to be completed in 30 mins during interview- they are focusing on speed:
1.Binary tree isomorphism
https://www.geeksforgeeks.org/tree-isomorphism-problem/
2.And count the number of brackets missing to make the expression a valid one
https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/

3.https://leetcode.com/problems/house-robber/
u are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.